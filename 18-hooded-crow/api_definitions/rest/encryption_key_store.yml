openapi: 3.0.3

info:
  title: Encryption Key Store
  version: 0.1.0

paths:
  /secrets:
    post:
      operationId: postEncryptionSecrets
      summary: Extract file encryption/decryption secret and file content offset from enevelope
      description: |
        Extract file encryption/decryption secret, create secret ID and extract file content offset.
        Saves first two in a secure store, returns all three to caller.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InboundEnvelopeQuery"

      responses:
        "200":
          description: |
            Information extracted from envelope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundEnvelopeContent"
        "400":
          description: Envelope malformed or missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedOrMissingEnvelopeError"
        "403":
          description: Could not decrypt envelope content with given keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvelopeDecryptionError"

  /secrets/{secret_id}/envelopes/{client_pk}:
    get:
      operationId: getPersonalizedEnvelope
      summary: Get personalized envelope containing Crypt4GH file encryption/decryption key
      description: |
        A Crypt4GH file envelope is created on demand using the corresponding file encryption/decryption secret,
        the current GHGA secret key and the download user's private key.
      parameters:
        - name: secret_id
          in: path
          required: true
          schema:
            type: string
        - name: client_pk
          in: path
          description: The public key of the client.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Envelope was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutboundEnvelope"
        "404":
          description: |
            Returned when either the file ID or public key is not known to the service.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/SecretNotFoundError"

components:
  schemas:
    OutboundEnvelope:
      title: Personalized Envelope
      description: |
        Crypt4GH Envelope generated with GHGA secret key and download user public key.
        Contains file encryption/decryption secret.
      type: object
      properties:
        content:
          type: string
          format: bytes
      required:
        - content

    InboundEnvelopeContent:
      title: Envelope Content
      description: |
        Contains file encryption/decryption secret extracted from file envelope, the ID generated for this secret
        and the file content offset, i.e. the location of the encrypted file content within the file.
      type: object
      properties:
        secret:
          type: string
          format: bytes
        secret_id:
          type: string
        offset:
          type: integer
          minimum: 0
      required:
        - secret
        - secret_id
        - offset

    EnvelopeDecryptionError:
      title: EnvelopeDecryptionError
      description:
        Error thrown when no available secret crypt4GH key can successfully decrypt the
        file envelope.
      type: object
      properties:
        description:
          description:
            A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          enum:
            - EnvelopeDecryptionError
          title: Exceptionid
          type: string

    InboundEnvelopeQuery:
      title: Envelope Query
      description: Request object containing first file part and user ID.
      type: object
      properties:
        client_pk:
          type: string
        file_part:
          type: string
          format: bytes
          description: First file part from inbox, containing the envelope.
      required:
        - user_id
        - file_part

    SecretNotFoundError:
      title: SecretNotFoundError
      description: No secret with the given ID is known.
      type: object
      properties:
        data:
          $ref: "#/components/schemas/SecretNotFoundErrorData"
        description:
          description:
            A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          enum:
            - SecretNotFoundError
          title: Exceptionid
          type: string

    SecretNotFoundErrorData:
      title: SecretNotFoundErrorData
      description: Model for exception data
      type: object
      properties:
        secret_id:
          title: Secret Id
          type: string
      required:
        - secret_id

    MalformedOrMissingEnvelopeError:
      title: MalformedOrMissingEnvelopeError
      description: Envelope decryption fails due to missing or malformed envelope.
      type: object
      properties:
        data:
          $ref: "#/components/schemas/MalformedOrMissingEnvelopeErrorData"
        description:
          description:
            A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          enum:
            - MalformedOrMissingEnvelopeError
          title: Exceptionid
          type: string

    MalformedOrMissingEnvelopeErrorData:
      title: MalformedOrMissingEnvelopeErrorData
      description: Model for exception data
      type: object
