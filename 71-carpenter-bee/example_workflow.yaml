- input: ghga_uemim_2.0.0
  output: ghga_stats
  operations:

  # Create the DatasetSummary class
  - name: duplicate_class
    description: "Add DatasetSummary class"
    args:
      class_name: Dataset
      new_class_name: DatasetSummary

  # Add a relation
  - name: add_relation
    description: "DatasetSummary: Add relation for {{ item.class_name }}"
    args:
      class_name: DatasetSummary
      relation_name: "{{ item.relation_name }}"
      relation_spec:
        description: "Samples associated with this dataset"
        target_class: "{{ item.class_name }}"
        mandatory:
          source: "{{ item.mandatory_source }}"
          target: false
        multiple:
          source: true
          target: true
    loop:
    - class_name: Sample
      relation_name: samples
      mandatory_source: true
    - class_name: Experiment
      relation_name: experiments
      mandatory_source: true
    - class_name: Individual
      relation_name: individuals
      mandatory_source: true

  # Infer samples for each dataset
  - name: add_relation_data
    description: "Infer samples for each dataset"
    args:
      source_class: DatasetSummary
      relation_name: samples
      path: "{{ item }}"
    loop:
    - "DatasetSummary(research_data_files)>ResearchDataFile(experiments)>Experiment(samples)>Sample"
    - "DatasetSummary(process_data_files)>ProcessDataFile(analysis)>Analysis(research_data_files)>ResearchDataFile(experiments)>Experiment(samples)>Sample"


  # Infer experiments for each dataset
  - name: add_relation_data
    args:
      source_class: DatasetSummary
      relation_name: experiments
    loop:
    - "DatasetSummary(research_data_files)>ResearchDataFile(experiments)>Experiment"
    - "DatasetSummary(process_data_files)>ProcessDataFile(analysis)>Analysis(research_data_files)>ResearchDataFile(experiments)>Experiment"

  # Verify data
  - name: verify

  - name: transform_content
    description: "Add stats content"
    args:
      class_name: DatasetSummary
      embedding_profile: {} # embedding profile to be used in denormalization
      schema: {} # Content schema
      data_template: |
        title: "{{ original.title }}"
        dac_email: "{{ original.data_access_policy.data_access_committee.email }}"
        description: "{{ original.description }}"
        types: "{{ original.types }}"
        samples_summary:
          count: "{{ original.samples | length }}"
          stats:
            sex:
            {% for sex, matches in original.individuals | groupby("sex")%}
              value: "{{ sex }}"
              count: {{ matches| length }}
            {% endfor %}
            tissues:
            {% for tissue, matches in original.samples | groupby("biospecimen_tissue_term")%}
              value: "{{ tissue }}"
              count: {{ matches| length }}
            {% endfor %}
            phenotypic_features:
            {% for feature, matches in original.individuals | groupby("phenotypic_feature_terms")%}
              value: "{{ feature }}"
              count: {{ matches| length }}
            {% endfor %}
        experiments_summary:
          count: "{{ original.experiments | length }}"
          stats:
            experiment_methods:
            {% for method, matches in original.experiments | groupby("experiment_method.instrument_model")%}
              value: "{{ method }}"
              count: {{ matches| length }}
            {% endfor %}
        files_summary:
          count: {{ original.research_data_files | length + original.process_data_files | length + original.analysis_method_supporting_files | length + original.individual_supporting_files | length + original.experiment_method_supporting_files | length }}
          stats:
            format:
            {% for format, matches in (original.research_data_files + original.process_data_files + original.analysis_method_supporting_files + original.individual_supporting_files + original.experiment_method_supporting_files  | groupby("format")%}
              value: "{{ format }}"
              count: {{ matches| length }}
            {% endfor %}

  # Verify data
  - name: verify

# Delete classes
- name: delete_class
  description: "Delete class {{ item }}"
  args:
    class_name: "{{ item }}"
  loop: # Delete all classes except DatasetSummary and Study (for embedding)
  - Dataset
  - Sample
  - Experiment
  - Individual
  - ResearchDataFile
  - ProcessDataFile
  - Analysis
  - SupportingFile
  - AnalysisMethodSupportingFile
  - IndividualSupportingFile
  - ExperimentMethodSupportingFile
  - Publication
